import Gaffer
import GafferArnold
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 10, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["Camera"] = GafferScene.Camera( "Camera" )
parent.addChild( __children["Camera"] )
__children["Camera"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Parent"] = GafferScene.Parent( "Parent" )
parent.addChild( __children["Parent"] )
__children["Parent"]["children"].addChild( GafferScene.ScenePlug( "child1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Parent"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["TransformQuery_rel"] = GafferScene.TransformQuery( "TransformQuery_rel" )
parent.addChild( __children["TransformQuery_rel"] )
__children["TransformQuery_rel"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression_FocusDistance"] = Gaffer.Expression( "Expression_FocusDistance" )
parent.addChild( __children["Expression_FocusDistance"] )
__children["Expression_FocusDistance"]["__in"].addChild( Gaffer.FloatPlug( "p0", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression_FocusDistance"]["__in"].addChild( Gaffer.StringPlug( "p1", defaultValue = '/CAM/camera/focusPlane', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression_FocusDistance"]["__in"].addChild( Gaffer.FloatPlug( "p2", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression_FocusDistance"]["__out"].addChild( Gaffer.FloatPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression_FocusDistance"]["__out"].addChild( Gaffer.IntPlug( "p1", direction = Gaffer.Plug.Direction.Out, defaultValue = 0, minValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression_FocusDistance"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["focalLength"] = Gaffer.FloatPlug( "focalLength", defaultValue = 35.0, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["focalLength"] )
__children["fStop"] = Gaffer.FloatPlug( "fStop", defaultValue = 5.599999904632568, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["fStop"] )
__children["name"] = Gaffer.StringPlug( "name", defaultValue = 'camera', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["name"] )
__children["sets"] = Gaffer.StringPlug( "sets", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["sets"] )
__children["aperture"] = Gaffer.V2fPlug( "aperture", defaultValue = imath.V2f( 36, 24 ), minValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["aperture"] )
__children["clippingPlanes"] = Gaffer.V2fPlug( "clippingPlanes", defaultValue = imath.V2f( 0.00999999978, 100000 ), minValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["clippingPlanes"] )
__children["xform_camera"] = Gaffer.TransformPlug( "xform_camera", defaultRotate = imath.V3f( 0, 0, 4.5089923e-06 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["xform_camera"] )
__children["Parent1"] = GafferScene.Parent( "Parent1" )
parent.addChild( __children["Parent1"] )
__children["Parent1"]["children"].addChild( GafferScene.ScenePlug( "child1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Parent1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["in"] = GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["Group"] = GafferScene.Group( "Group" )
parent.addChild( __children["Group"] )
__children["Group"]["in"].addChild( GafferScene.ScenePlug( "in1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Group"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["location"] = Gaffer.StringPlug( "location", defaultValue = '/CAM/camera/focusPlane', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["location"] )
__children["focusPoint"] = GafferScene.Plane( "focusPoint" )
parent.addChild( __children["focusPoint"] )
__children["focusPoint"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OpenGLAttributes1"] = GafferScene.OpenGLAttributes( "OpenGLAttributes1" )
parent.addChild( __children["OpenGLAttributes1"] )
__children["OpenGLAttributes1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldAttributes1"] = GafferArnold.ArnoldAttributes( "ArnoldAttributes1" )
parent.addChild( __children["ArnoldAttributes1"] )
__children["ArnoldAttributes1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot1"] = Gaffer.Dot( "Dot1" )
parent.addChild( __children["Dot1"] )
__children["Dot1"].setup( GafferScene.ScenePlug( "in", ) )
__children["Dot1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["transform"] = Gaffer.TransformPlug( "transform", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["transform"] )
__children["visualiserAttributes_scale"] = Gaffer.NameValuePlug( "gl:visualiser:scale", Gaffer.FloatPlug( "value", defaultValue = 1.0, minValue = 0.009999999776482582, ), True, "visualiserAttributes_scale", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic )
parent.addChild( __children["visualiserAttributes_scale"] )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Switch"] = Gaffer.Switch( "Switch" )
parent.addChild( __children["Switch"] )
__children["Switch"].setup( GafferScene.ScenePlug( "in", ) )
__children["Switch"]["in"].addChild( GafferScene.ScenePlug( "in1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Switch"]["in"].addChild( GafferScene.ScenePlug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Switch"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot"] = Gaffer.Dot( "Dot" )
parent.addChild( __children["Dot"] )
__children["Dot"].setup( GafferScene.ScenePlug( "in", ) )
__children["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot2"] = Gaffer.Dot( "Dot2" )
parent.addChild( __children["Dot2"] )
__children["Dot2"].setup( GafferScene.FilterPlug( "in", defaultValue = 0, minValue = 0, maxValue = 7, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.AcceptsDependencyCycles, ) )
__children["Dot2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PointConstraint"] = GafferScene.PointConstraint( "PointConstraint" )
parent.addChild( __children["PointConstraint"] )
__children["PointConstraint"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot3"] = Gaffer.Dot( "Dot3" )
parent.addChild( __children["Dot3"] )
__children["Dot3"].setup( GafferScene.ScenePlug( "in", ) )
__children["Dot3"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["offset"] = Gaffer.V3fPlug( "offset", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["offset"] )
__children["Camera"]["name"].setInput( __children["name"] )
__children["Camera"]["sets"].setInput( __children["sets"] )
__children["Camera"]["transform"].setInput( __children["xform_camera"] )
__children["Camera"]["perspectiveMode"].setValue( 1 )
__children["Camera"]["aperture"].setInput( __children["aperture"] )
__children["Camera"]["focalLength"].setInput( __children["focalLength"] )
__children["Camera"]["fStop"].setInput( __children["fStop"] )
__children["Camera"]["focusDistance"].setInput( __children["Expression_FocusDistance"]["__out"]["p0"] )
__children["Camera"]["clippingPlanes"].setInput( __children["clippingPlanes"] )
__children["Camera"]["visualiserAttributes"]["scale"].setInput( __children["visualiserAttributes_scale"] )
__children["Camera"]["__uiPosition"].setValue( imath.V2f( 178.893021, -28.1708603 ) )
__children["Parent"]["in"].setInput( __children["Camera"]["out"] )
__children["Parent"]["parent"].setValue( '/camera' )
__children["Parent"]["children"][0].setInput( __children["ArnoldAttributes1"]["out"] )
__children["Parent"]["__uiPosition"].setValue( imath.V2f( 187.036942, -36.3349228 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 2 )
__children["TransformQuery_rel"]["scene"].setInput( __children["Parent1"]["out"] )
__children["TransformQuery_rel"]["location"].setInput( __children["location"] )
__children["TransformQuery_rel"]["space"].setValue( 2 )
__children["TransformQuery_rel"]["relativeLocation"].setValue( '/CAM/camera' )
__children["TransformQuery_rel"]["__uiPosition"].setValue( imath.V2f( 194.443558, -59.9083748 ) )
Gaffer.Metadata.registerValue( __children["Expression_FocusDistance"], 'nodeGadget:type', 'GafferUI::StandardNodeGadget' )
__children["Expression_FocusDistance"]["__in"]["p0"].setInput( __children["TransformQuery_rel"]["translate"]["z"] )
__children["Expression_FocusDistance"]["__in"]["p1"].setInput( __children["location"] )
__children["Expression_FocusDistance"]["__in"]["p2"].setInput( __children["offset"]["z"] )
__children["Expression_FocusDistance"]["__uiPosition"].setValue( imath.V2f( 178.260147, -63.7978973 ) )
__children["BoxOut"]["in"].setInput( __children["Switch"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The processed output scene.' )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 153.352081, -102.218399 ) )
Gaffer.Metadata.registerValue( __children["focalLength"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["focalLength"], 'description', "The focal length portion of the _Aperture and Focal Length_\nperspective mode. This is equivalent to the lens's focal\nlength in a real camera setup. Use this in conjunction with\nthe aperture to set the camera's equivalent field of view.\nLike on a real camera, the aperture is typically constant,\nand the focal length is then adjusted to control the field\nof view.\n\nThis can be a distance in any unit of length, as long as\nyou use the same unit for the aperture. You can safely\nfollow convention and use millimeters for both.\n\nThe final field of view of a render using this camera will\ndepend on these settings in combination with the\n`resolution` and `filmFit` render options." )
Gaffer.Metadata.registerValue( __children["focalLength"], 'layout:section', 'Settings.Camera' )
Gaffer.Metadata.registerValue( __children["focalLength"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["fStop"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["fStop"], 'description', 'The setting equivalent to the f-number on a camera, which ultimately determines the strength of the depth of field blur. A lower value produces more blur. As in a real camera, `fStop` is defined as `focalLength / lens aperture`.\n\nTo enable depth of field blur (if your renderer supports it), give this plug a value greater than 0, and, on a downstream StandardOptions node, enable the _Depth Of Field_ plug and turn it on.' )
Gaffer.Metadata.registerValue( __children["fStop"], 'layout:section', 'Settings.Depth of Field' )
Gaffer.Metadata.registerValue( __children["fStop"], 'layout:index', 10 )
Gaffer.Metadata.registerValue( __children["name"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["name"], 'description', 'The name of the object in the output scene.' )
Gaffer.Metadata.registerValue( __children["name"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["name"], 'layout:index', 0 )
Gaffer.Metadata.registerValue( __children["sets"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["sets"], 'description', 'A list of sets to include the object in. The\nnames should be separated by spaces.' )
Gaffer.Metadata.registerValue( __children["sets"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["sets"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["aperture"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["aperture"], 'description', 'The width and height of the aperture when using the\n_Aperture and Focal Length_ perspective mode. Use this in\nconjunction with a focal length to define the camera\'s\nequivalent field of view.\n\n"Aperture" here is equivalent to the film back/sensor on a\nreal camera. A handful of default camera presets are\nprovided, including Full Frame 35mm and several popular\nAlexa and RED bodies. Once the aperture is set, the focal\nlength can then be adjusted on its own to control the field\nof view, just like on a real camera.\n\nWhen setting the aperture manually, the `x` and `y`\ndimensions can be measured in any unit of length, so long\nas they use the same unit as the focal length. You can\nsafely follow convention and use millimeters for both.\n\nThe final field of view of a render will depend on these\nsettings in combination with the `resolution` and `filmFit`\nrender options.' )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Academy 35mm   \t21.946 × 16.000', imath.V2f( 21.9459991, 16 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Super 35mm   \t24.892 × 18.669', imath.V2f( 24.8920002, 18.6690006 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Micro Four Thirds   \t17.30 × 13.00', imath.V2f( 17.2999992, 13 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:APS-C   \t22.30 × 14.90', imath.V2f( 22.2999992, 14.8999996 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Full Frame 35mm   \t36.00 × 24.00', imath.V2f( 36, 24 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Alexa SXT 4:3 2.8k   \t23.76 × 17.82', imath.V2f( 23.7600002, 17.8199997 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Alexa SXT Open Gate 3.4k   \t28.25 × 18.17', imath.V2f( 28.25, 18.1700001 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Alexa 65 16:9 5.1k   \t42.24 × 23.76', imath.V2f( 42.2400017, 23.7600002 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Alexa 65 Open Gate 6.5k   \t54.12 × 25.58', imath.V2f( 54.1199989, 25.5799999 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:RED EPIC-W 5K S35   \t30.72 × 18.00', imath.V2f( 30.7199993, 18 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:RED EPIC-W 8K S35   \t29.90 × 15.77', imath.V2f( 29.8999996, 15.7700005 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'presetsPlugValueWidget:allowCustom', True )
Gaffer.Metadata.registerValue( __children["aperture"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["aperture"], 'layout:section', 'Settings.Camera' )
Gaffer.Metadata.registerValue( __children["aperture"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["clippingPlanes"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["clippingPlanes"], 'description', 'The near and far clipping planes, defining a region of\nforward depth within which objects are visible to this\ncamera.' )
Gaffer.Metadata.registerValue( __children["clippingPlanes"], 'layout:section', 'Settings.Camera' )
Gaffer.Metadata.registerValue( __children["clippingPlanes"], 'layout:index', 6 )
Gaffer.Metadata.registerValue( __children["xform_camera"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["xform_camera"], 'description', 'The transform applied to the object.' )
Gaffer.Metadata.registerValue( __children["xform_camera"], 'layout:section', 'Settings.Camera.Transform' )
Gaffer.Metadata.registerValue( __children["xform_camera"], 'layout:index', 8 )
__children["Parent1"]["in"].setInput( __children["BoxIn"]["out"] )
__children["Parent1"]["parent"].setValue( '/' )
__children["Parent1"]["children"][0].setInput( __children["Group"]["out"] )
__children["Parent1"]["__uiPosition"].setValue( imath.V2f( 169.120972, -51.7443123 ) )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["BoxIn"]["out"], 'noduleLayout:section', 'bottom' )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( 166.870972, -36.8381577 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:index', 3 )
__children["Group"]["in"][0].setInput( __children["Parent"]["out"] )
__children["Group"]["name"].setValue( 'CAM' )
__children["Group"]["__uiPosition"].setValue( imath.V2f( 187.036942, -43.5802498 ) )
Gaffer.Metadata.registerValue( __children["location"], 'description', 'The location within the scene to query the transform at.\n\n> Note : If the location does not exist then the query will not be\n> performed and all outputs will be set to their default values.' )
Gaffer.Metadata.registerValue( __children["location"], 'plugValueWidget:type', 'GafferSceneUI.ScenePathPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["location"], 'scenePathPlugValueWidget:scene', 'scene' )
Gaffer.Metadata.registerValue( __children["location"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["location"], 'layout:section', 'Settings.Depth of Field' )
Gaffer.Metadata.registerValue( __children["location"], 'layout:index', 9 )
Gaffer.Metadata.registerValue( __children["location"], 'label', 'Focus Point' )
__children["focusPoint"]["name"].setValue( 'focusPlane' )
__children["focusPoint"]["transform"].setInput( __children["transform"] )
__children["focusPoint"]["dimensions"].setValue( imath.V2f( 25, 25 ) )
__children["focusPoint"]["__uiPosition"].setValue( imath.V2f( 199.6427, -12.0753584 ) )
__children["OpenGLAttributes1"]["in"].setInput( __children["focusPoint"]["out"] )
__children["OpenGLAttributes1"]["attributes"]["primitiveSolid"]["value"].setValue( False )
__children["OpenGLAttributes1"]["attributes"]["primitiveSolid"]["enabled"].setValue( True )
__children["OpenGLAttributes1"]["attributes"]["primitiveWireframe"]["enabled"].setValue( True )
__children["OpenGLAttributes1"]["attributes"]["primitiveWireframeColor"]["value"].setValue( imath.Color4f( 0.215000004, 0.746999919, 0.915000021, 1 ) )
__children["OpenGLAttributes1"]["attributes"]["primitiveWireframeColor"]["enabled"].setValue( True )
__children["OpenGLAttributes1"]["attributes"]["primitiveWireframeWidth"]["value"].setValue( 2.0 )
__children["OpenGLAttributes1"]["attributes"]["primitiveWireframeWidth"]["enabled"].setValue( True )
__children["OpenGLAttributes1"]["__uiPosition"].setValue( imath.V2f( 199.6427, -22.5067978 ) )
__children["ArnoldAttributes1"]["in"].setInput( __children["OpenGLAttributes1"]["out"] )
__children["ArnoldAttributes1"]["attributes"]["cameraVisibility"]["value"].setValue( False )
__children["ArnoldAttributes1"]["attributes"]["cameraVisibility"]["enabled"].setValue( True )
__children["ArnoldAttributes1"]["attributes"]["shadowVisibility"]["value"].setValue( False )
__children["ArnoldAttributes1"]["attributes"]["shadowVisibility"]["enabled"].setValue( True )
__children["ArnoldAttributes1"]["attributes"]["shadowGroup"]["enabled"].setValue( True )
__children["ArnoldAttributes1"]["attributes"]["diffuseReflectionVisibility"]["value"].setValue( False )
__children["ArnoldAttributes1"]["attributes"]["diffuseReflectionVisibility"]["enabled"].setValue( True )
__children["ArnoldAttributes1"]["attributes"]["specularReflectionVisibility"]["value"].setValue( False )
__children["ArnoldAttributes1"]["attributes"]["specularReflectionVisibility"]["enabled"].setValue( True )
__children["ArnoldAttributes1"]["attributes"]["diffuseTransmissionVisibility"]["value"].setValue( False )
__children["ArnoldAttributes1"]["attributes"]["diffuseTransmissionVisibility"]["enabled"].setValue( True )
__children["ArnoldAttributes1"]["attributes"]["specularTransmissionVisibility"]["value"].setValue( False )
__children["ArnoldAttributes1"]["attributes"]["specularTransmissionVisibility"]["enabled"].setValue( True )
__children["ArnoldAttributes1"]["attributes"]["volumeVisibility"]["value"].setValue( False )
__children["ArnoldAttributes1"]["attributes"]["volumeVisibility"]["enabled"].setValue( True )
__children["ArnoldAttributes1"]["attributes"]["subsurfaceVisibility"]["value"].setValue( False )
__children["ArnoldAttributes1"]["attributes"]["subsurfaceVisibility"]["enabled"].setValue( True )
__children["ArnoldAttributes1"]["__uiPosition"].setValue( imath.V2f( 199.6427, -28.1708603 ) )
__children["Dot1"]["in"].setInput( __children["Parent1"]["out"] )
__children["Dot1"]["__uiPosition"].setValue( imath.V2f( 164.356506, -59.0763435 ) )
Gaffer.Metadata.registerValue( __children["transform"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["transform"], 'description', 'The transform applied to the object.' )
Gaffer.Metadata.registerValue( __children["transform"], 'layout:section', 'Settings.Depth of Field.Focus Point Transform (Free)' )
Gaffer.Metadata.registerValue( __children["transform"], 'layout:index', 11 )
Gaffer.Metadata.registerValue( __children["transform"]["rotate"], 'readOnly', True )
Gaffer.Metadata.registerValue( __children["transform"]["scale"], 'readOnly', False )
__children["transform"]["scale"]["y"].setInput( __children["transform"]["scale"]["x"] )
__children["transform"]["scale"]["z"].setInput( __children["transform"]["scale"]["x"] )
Gaffer.Metadata.registerValue( __children["transform"]["pivot"], 'readOnly', True )
Gaffer.Metadata.registerValue( __children["visualiserAttributes_scale"], 'spreadsheet:columnName', 'scale' )
Gaffer.Metadata.registerValue( __children["visualiserAttributes_scale"], 'description', 'Scales non-geometric visualisations in the viewport to make them\neasier to work with.' )
Gaffer.Metadata.registerValue( __children["visualiserAttributes_scale"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["visualiserAttributes_scale"], 'layout:section', 'Settings.Camera' )
Gaffer.Metadata.registerValue( __children["visualiserAttributes_scale"], 'layout:index', 7 )
Gaffer.Metadata.registerValue( __children["visualiserAttributes_scale"], 'label', 'Camera Visualizer Scale' )
Gaffer.Metadata.registerValue( __children["visualiserAttributes_scale"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["visualiserAttributes_scale"]["value"], 'spreadsheet:columnName', 'scaleValue' )
Gaffer.Metadata.registerValue( __children["visualiserAttributes_scale"]["enabled"], 'spreadsheet:columnName', 'scaleEnabled' )
__children["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/CAM/camera/focusPlane' ] ) )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( 190.820358, -70.0999832 ) )
__children["Switch"]["index"].setInput( __children["Expression_FocusDistance"]["__out"]["p1"] )
Gaffer.Metadata.registerValue( __children["Switch"]["in"], 'noduleLayout:section', 'top' )
__children["Switch"]["in"][0].setInput( __children["Dot"]["out"] )
__children["Switch"]["in"][1].setInput( __children["Dot3"]["out"] )
Gaffer.Metadata.registerValue( __children["Switch"]["out"], 'noduleLayout:section', 'bottom' )
__children["Switch"]["__uiPosition"].setValue( imath.V2f( 151.852081, -93.8863678 ) )
__children["Dot"]["in"].setInput( __children["Dot1"]["out"] )
__children["Dot"]["__uiPosition"].setValue( imath.V2f( 148.852081, -65.5763397 ) )
__children["Dot2"]["in"].setInput( __children["PathFilter"]["out"] )
Gaffer.Metadata.registerValue( __children["Dot2"]["in"], 'noduleLayout:section', 'right' )
Gaffer.Metadata.registerValue( __children["Dot2"]["out"], 'noduleLayout:section', 'left' )
__children["Dot2"]["__uiPosition"].setValue( imath.V2f( 182.344284, -74.1292877 ) )
__children["PointConstraint"]["in"].setInput( __children["Dot1"]["out"] )
__children["PointConstraint"]["filter"].setInput( __children["Dot2"]["out"] )
__children["PointConstraint"]["target"].setInput( __children["location"] )
__children["PointConstraint"]["ignoreMissingTarget"].setValue( True )
__children["PointConstraint"]["targetMode"].setValue( 3 )
__children["PointConstraint"]["offset"].setInput( __children["offset"] )
__children["PointConstraint"]["__uiPosition"].setValue( imath.V2f( 165.856506, -74.1292877 ) )
__children["Dot3"]["in"].setInput( __children["PointConstraint"]["out"] )
__children["Dot3"]["__uiPosition"].setValue( imath.V2f( 165.856506, -86.5543365 ) )
Gaffer.Metadata.registerValue( __children["offset"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["offset"], 'description', 'A world space translation offset applied on top\nof the target position.\n\n> Note : This is ignored when `keepReferencePosition` is on. In this case it is easier\n> to modify the reference position instead.' )
Gaffer.Metadata.registerValue( __children["offset"], 'layout:section', 'Settings.Depth of Field.Focus Point Offset (Constraint)' )
Gaffer.Metadata.registerValue( __children["offset"], 'layout:index', 12 )
__children["Expression_FocusDistance"]["__engine"].setValue( 'python' )
__children["Expression_FocusDistance"]["__expression"].setValue( 'distance = parent["__in"]["p0"]\n\nabsDistance = abs(distance)\n\nparent["__out"]["p0"]= absDistance\n\nif parent["__in"]["p1"] == "/CAM/camera/focusPlane":\n\tpass\nelse:\n\tparent["__out"]["p1"] = 1\n\tparent["__out"]["p0"]= absDistance + parent["__in"]["p2"]' )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', True )


del __children

