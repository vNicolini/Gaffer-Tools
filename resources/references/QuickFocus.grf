import Gaffer
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 10, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["Camera"] = GafferScene.Camera( "Camera" )
parent.addChild( __children["Camera"] )
__children["Camera"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["CoordinateSystem"] = GafferScene.CoordinateSystem( "CoordinateSystem" )
parent.addChild( __children["CoordinateSystem"] )
__children["CoordinateSystem"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Parent"] = GafferScene.Parent( "Parent" )
parent.addChild( __children["Parent"] )
__children["Parent"]["children"].addChild( GafferScene.ScenePlug( "child1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Parent"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["TransformQuery"] = GafferScene.TransformQuery( "TransformQuery" )
parent.addChild( __children["TransformQuery"] )
__children["TransformQuery"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"] = Gaffer.Expression( "Expression" )
parent.addChild( __children["Expression"] )
__children["Expression"]["__in"].addChild( Gaffer.FloatPlug( "p0", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.FloatPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["focalLength"] = Gaffer.FloatPlug( "focalLength", defaultValue = 35.0, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["focalLength"] )
__children["fStop"] = Gaffer.FloatPlug( "fStop", defaultValue = 5.599999904632568, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["fStop"] )
__children["name"] = Gaffer.StringPlug( "name", defaultValue = 'camera', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["name"] )
__children["sets"] = Gaffer.StringPlug( "sets", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["sets"] )
__children["aperture"] = Gaffer.V2fPlug( "aperture", defaultValue = imath.V2f( 36, 24 ), minValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["aperture"] )
__children["clippingPlanes"] = Gaffer.V2fPlug( "clippingPlanes", defaultValue = imath.V2f( 0.00999999978, 100000 ), minValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["clippingPlanes"] )
__children["focusDist"] = Gaffer.FloatPlug( "focusDist", defaultValue = 36.195556640625, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["focusDist"] )
__children["xform_camera"] = Gaffer.TransformPlug( "xform_camera", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["xform_camera"] )
__children["xform_focusPoint"] = Gaffer.TransformPlug( "xform_focusPoint", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["xform_focusPoint"] )
__children["Camera"]["name"].setInput( __children["name"] )
__children["Camera"]["sets"].setInput( __children["sets"] )
__children["Camera"]["transform"].setInput( __children["xform_camera"] )
__children["Camera"]["perspectiveMode"].setValue( 1 )
__children["Camera"]["aperture"].setInput( __children["aperture"] )
__children["Camera"]["focalLength"].setInput( __children["focalLength"] )
__children["Camera"]["fStop"].setInput( __children["fStop"] )
__children["Camera"]["focusDistance"].setInput( __children["Expression"]["__out"]["p0"] )
__children["Camera"]["clippingPlanes"].setInput( __children["clippingPlanes"] )
__children["Camera"]["__uiPosition"].setValue( imath.V2f( 124.751831, -41.0802498 ) )
__children["CoordinateSystem"]["name"].setValue( 'focusPoint' )
__children["CoordinateSystem"]["transform"].setInput( __children["xform_focusPoint"] )
__children["CoordinateSystem"]["__uiPosition"].setValue( imath.V2f( 139.558411, -41.0802498 ) )
__children["Parent"]["in"].setInput( __children["Camera"]["out"] )
__children["Parent"]["parent"].setValue( '/camera' )
__children["Parent"]["children"][0].setInput( __children["CoordinateSystem"]["out"] )
__children["Parent"]["__uiPosition"].setValue( imath.V2f( 131.657532, -49.2443123 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 2 )
__children["TransformQuery"]["scene"].setInput( __children["Parent"]["out"] )
__children["TransformQuery"]["location"].setValue( '/camera/focusPoint' )
__children["TransformQuery"]["space"].setValue( 2 )
__children["TransformQuery"]["relativeLocation"].setValue( '/camera' )
__children["TransformQuery"]["__uiPosition"].setValue( imath.V2f( 169.120972, -57.4083748 ) )
__children["Expression"]["__in"]["p0"].setInput( __children["TransformQuery"]["translate"]["z"] )
__children["Expression"]["__uiPosition"].setValue( imath.V2f( 124.593521, -61.3191109 ) )
__children["BoxOut"]["in"].setInput( __children["Parent"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The processed output scene.' )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 133.156845, -57.5763435 ) )
Gaffer.Metadata.registerValue( __children["focalLength"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["focalLength"], 'description', "The focal length portion of the _Aperture and Focal Length_\nperspective mode. This is equivalent to the lens's focal\nlength in a real camera setup. Use this in conjunction with\nthe aperture to set the camera's equivalent field of view.\nLike on a real camera, the aperture is typically constant,\nand the focal length is then adjusted to control the field\nof view.\n\nThis can be a distance in any unit of length, as long as\nyou use the same unit for the aperture. You can safely\nfollow convention and use millimeters for both.\n\nThe final field of view of a render using this camera will\ndepend on these settings in combination with the\n`resolution` and `filmFit` render options." )
Gaffer.Metadata.registerValue( __children["focalLength"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["focalLength"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["fStop"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["fStop"], 'description', 'The setting equivalent to the f-number on a camera, which ultimately determines the strength of the depth of field blur. A lower value produces more blur. As in a real camera, `fStop` is defined as `focalLength / lens aperture`.\n\nTo enable depth of field blur (if your renderer supports it), give this plug a value greater than 0, and, on a downstream StandardOptions node, enable the _Depth Of Field_ plug and turn it on.' )
Gaffer.Metadata.registerValue( __children["fStop"], 'layout:section', 'Settings.Depth of Field' )
Gaffer.Metadata.registerValue( __children["fStop"], 'layout:index', 7 )
Gaffer.Metadata.registerValue( __children["name"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["name"], 'description', 'The name of the object in the output scene.' )
Gaffer.Metadata.registerValue( __children["name"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["name"], 'layout:index', 0 )
Gaffer.Metadata.registerValue( __children["sets"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["sets"], 'description', 'A list of sets to include the object in. The\nnames should be separated by spaces.' )
Gaffer.Metadata.registerValue( __children["sets"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["sets"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["aperture"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["aperture"], 'description', 'The width and height of the aperture when using the\n_Aperture and Focal Length_ perspective mode. Use this in\nconjunction with a focal length to define the camera\'s\nequivalent field of view.\n\n"Aperture" here is equivalent to the film back/sensor on a\nreal camera. A handful of default camera presets are\nprovided, including Full Frame 35mm and several popular\nAlexa and RED bodies. Once the aperture is set, the focal\nlength can then be adjusted on its own to control the field\nof view, just like on a real camera.\n\nWhen setting the aperture manually, the `x` and `y`\ndimensions can be measured in any unit of length, so long\nas they use the same unit as the focal length. You can\nsafely follow convention and use millimeters for both.\n\nThe final field of view of a render will depend on these\nsettings in combination with the `resolution` and `filmFit`\nrender options.' )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Academy 35mm   \t21.946 × 16.000', imath.V2f( 21.9459991, 16 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Super 35mm   \t24.892 × 18.669', imath.V2f( 24.8920002, 18.6690006 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Micro Four Thirds   \t17.30 × 13.00', imath.V2f( 17.2999992, 13 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:APS-C   \t22.30 × 14.90', imath.V2f( 22.2999992, 14.8999996 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Full Frame 35mm   \t36.00 × 24.00', imath.V2f( 36, 24 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Alexa SXT 4:3 2.8k   \t23.76 × 17.82', imath.V2f( 23.7600002, 17.8199997 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Alexa SXT Open Gate 3.4k   \t28.25 × 18.17', imath.V2f( 28.25, 18.1700001 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Alexa 65 16:9 5.1k   \t42.24 × 23.76', imath.V2f( 42.2400017, 23.7600002 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:Alexa 65 Open Gate 6.5k   \t54.12 × 25.58', imath.V2f( 54.1199989, 25.5799999 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:RED EPIC-W 5K S35   \t30.72 × 18.00', imath.V2f( 30.7199993, 18 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'preset:RED EPIC-W 8K S35   \t29.90 × 15.77', imath.V2f( 29.8999996, 15.7700005 ) )
Gaffer.Metadata.registerValue( __children["aperture"], 'presetsPlugValueWidget:allowCustom', True )
Gaffer.Metadata.registerValue( __children["aperture"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["aperture"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["aperture"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["clippingPlanes"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["clippingPlanes"], 'description', 'The near and far clipping planes, defining a region of\nforward depth within which objects are visible to this\ncamera.' )
Gaffer.Metadata.registerValue( __children["clippingPlanes"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["clippingPlanes"], 'layout:index', 5 )
__children["focusDist"].setInput( __children["Camera"]["focusDistance"] )
Gaffer.Metadata.registerValue( __children["focusDist"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["focusDist"], 'layout:section', 'Settings.Depth of Field' )
Gaffer.Metadata.registerValue( __children["focusDist"], 'label', 'Focus Distance' )
Gaffer.Metadata.registerValue( __children["focusDist"], 'layout:index', 8 )
Gaffer.Metadata.registerValue( __children["xform_camera"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["xform_camera"], 'description', 'The transform applied to the object.' )
Gaffer.Metadata.registerValue( __children["xform_camera"], 'layout:section', 'Settings.Transform' )
Gaffer.Metadata.registerValue( __children["xform_camera"], 'layout:index', 6 )
Gaffer.Metadata.registerValue( __children["xform_focusPoint"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["xform_focusPoint"], 'description', 'The transform applied to the object.' )
Gaffer.Metadata.registerValue( __children["xform_focusPoint"], 'layout:section', 'Settings.Depth of Field.Focus Point' )
Gaffer.Metadata.registerValue( __children["xform_focusPoint"], 'layout:index', 9 )
__children["Expression"]["__engine"].setValue( 'python' )
__children["Expression"]["__expression"].setValue( 'distance = parent["__in"]["p0"]\n\nabsDistance = abs(distance)\n\nparent["__out"]["p0"]= absDistance' )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )


del __children

